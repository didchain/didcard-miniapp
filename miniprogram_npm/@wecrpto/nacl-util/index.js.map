{"version":3,"sources":["nacl-util.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["// Written in 2014-2016 by Dmitry Chestnykh and Devi Mandiri.\r\n// Public domain.\r\n(function(root, f) {\r\n  \r\n  if (typeof module !== 'undefined' && module.exports) module.exports = f();\r\n  else if (root.nacl) root.nacl.util = f();\r\n  else {\r\n    root.nacl = {};\r\n    root.nacl.util = f();\r\n  }\r\n}(this, function() {\r\n  \r\n\r\n  var util = {};\r\n\r\n  function validateBase64(s) {\r\n    if (!(/^(?:[A-Za-z0-9+\\/]{2}[A-Za-z0-9+\\/]{2})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$/.test(s))) {\r\n      throw new TypeError('invalid encoding');\r\n    }\r\n  }\r\n\r\n  util.decodeUTF8 = function(s) {\r\n    if (typeof s !== 'string') throw new TypeError('expected string');\r\n    var i, d = unescape(encodeURIComponent(s)), b = new Uint8Array(d.length);\r\n    for (i = 0; i < d.length; i++) b[i] = d.charCodeAt(i);\r\n    return b;\r\n  };\r\n\r\n  util.encodeUTF8 = function(arr) {\r\n    var i, s = [];\r\n    for (i = 0; i < arr.length; i++) s.push(String.fromCharCode(arr[i]));\r\n    return decodeURIComponent(escape(s.join('')));\r\n  };\r\n\r\n  if (typeof atob === 'undefined') {\r\n    // Node.js\r\n\r\n    if (typeof Buffer.from !== 'undefined') {\r\n       // Node v6 and later\r\n      util.encodeBase64 = function(arr) { // v6 and later\r\n          return Buffer.from(arr).toString('base64');\r\n      };\r\n\r\n      util.decodeBase64 = function(s) {\r\n        validateBase64(s);\r\n        return new Uint8Array(Array.prototype.slice.call(Buffer.from(s, 'base64'), 0));\r\n      };\r\n\r\n    } else {\r\n      // Node earlier than v6\r\n      util.encodeBase64 = function(arr) { // v6 and later\r\n        return (new Buffer(arr)).toString('base64');\r\n      };\r\n\r\n      util.decodeBase64 = function(s) {\r\n        validateBase64(s);\r\n        return new Uint8Array(Array.prototype.slice.call(new Buffer(s, 'base64'), 0));\r\n      };\r\n    }\r\n\r\n  } else {\r\n    // Browsers\r\n\r\n    util.encodeBase64 = function(arr) {\r\n      var i, s = [], len = arr.length;\r\n      for (i = 0; i < len; i++) s.push(String.fromCharCode(arr[i]));\r\n      return btoa(s.join(''));\r\n    };\r\n\r\n    util.decodeBase64 = function(s) {\r\n      validateBase64(s);\r\n      var i, d = atob(s), b = new Uint8Array(d.length);\r\n      for (i = 0; i < d.length; i++) b[i] = d.charCodeAt(i);\r\n      return b;\r\n    };\r\n\r\n  }\r\n\r\n  return util;\r\n\r\n}));\r\n"]}